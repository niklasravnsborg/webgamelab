/*global Audio, addEventListener, alert*/
/*jslint white: true */


// General - Functions
var ctx = document.getElementById("canvas").getContext("2d"),
    keysdown = {},
    gui_font = "Impact";

var l_1_file = "120;20;300;0:0;7:4;109:0;10:4;109:0;5:4;1:3;5:4;107:0;12:4;108:0;8:4;1:3;1:4;1:3;1:4;109:0;5:4;2:3;1:4;1:3;2:4;108:0;3:4;1:3;2:4;2:3;1:4;1:3;111:0;3:4;1:3;1:4;3:3;111:0;4:4;1:3;2:4;1:3;93:0;1:4;20:0;3:4;3:3;92:0;3:4;6:0;1:100;12:0;4:4;2:3;87:0;3:100;1:0;4:4;6:0;1:100;15:0;1:4;2:3;59:0;2:100;21:0;5:100;3:0;8:2;3:0;1:100;16:0;2:3;28:0;3:100;27:0;1:100;2:0;1:100;20:0;1:104;2:0;1:210;1:104;3:2;8:1;1:2;2:0;1:100;16:0;3:3;25:0;2:100;3:2;1:100;16:0;1:4;9:0;1:2;2:0;2:2;19:0;5:2;6:1;3:0;3:1;2:0;1:100;16:0;4:3;24:0;2:2;3:1;1:2;4:0;2:100;9:0;3:4;4:0;3:100;9:0;3:100;12:0;1:2;7:1;2:0;1:1;2:0;2:100;1:0;2:1;2:0;1:100;15:0;1:2;2:1;2:3;1:0;2:100;31:0;2:2;8:0;2:4;1:3;2:4;28:0;2:2;6:1;2:0;1:100;1:0;5:100;1:0;1:1;15:0;3:100;1:0;4:1;1:3;1:2;2:0;3:100;13:0;1:4;3:0;1:104;14:0;1:210;1:0;1:104;4:0;1:4;1:3;1:4;4:0;3:2;9:5;3:2;2:0;3:100;3:0;2:2;9:1;1:0;2:100;1:0;5:100;7:0;4:100;2:0;3:100;3:0;1:2;6:1;2:2;8:0;1:106;6:0;3:4;2:0;18:2;5:0;1:3;2:0;3:2;4:1;7:6;4:1;1:2;1:104;1:0;1:210;1:0;1:104;2:2;11:1;4:100;1:0;2:100;1:0;1:100;5:0;1:4;1:0;1:104;1:0;1:210;3:0;1:210;1:0;1:104;3:2;9:1;3:2;11:0;6:2;18:1;1:2;2:0;5:2;8:1;3:6;8:1;5:2;12:1;2:100;2:0;2:1;2:100;2:1;2:2;2:0;3:4;9:2;15:1;11:2;25:1;2:2;53:1;5:2;15:1",
    l_2_file = "120;20;0:0;5:1;6:0;1:100;13:1;68:20;27:0;5:1;6:0;14:1;42:20;53:0;1:1;3:20;8:0;55:20;7:0;1:100;5:0;1:100;9:0;1:100;29:0;1:1;23:0;2:20;33:0;8:20;14:0;1:100;5:0;1:104;1:0;1:210;2:0;1:104;27:0;1:1;23:0;2:20;33:0;8:20;3:0;1:21;1:0;4:21;2:0;5:21;1:0;2:21;1:0;6:21;27:0;1:1;23:0;2:20;35:0;6:20;3:0;1:20;1:0;1:20;2:0;1:20;2:0;1:20;3:0;1:20;1:100;1:0;1:100;1:0;1:20;4:0;1:20;27:0;1:1;23:0;2:20;16:0;2:100;4:0;1:100;12:0;6:20;2:0;1:21;3:20;2:0;4:20;3:0;6:20;4:0;1:20;1:21;26:0;1:1;40:0;1:100;2:0;1:100;2:0;1:100;1:0;1:100;13:0;4:20;26:0;1:20;26:0;1:1;36:0;1:100;25:0;4:20;1:0;1:100;24:0;1:20;26:0;1:1;23:0;2:100;15:0;1:21;3:0;2:21;3:0;2:21;13:0;2:20;1:21;1:104;6:0;1:210;11:0;1:104;5:0;1:20;26:0;1:1;33:0;1:100;30:0;3:20;20:21;5:0;1:20;26:0;1:1;90:0;1:21;1:0;1:20;26:0;1:1;23:0;2:21;7:0;1:100;3:0;1:21;55:0;1:20;26:0;1:1;23:0;2:20;42:0;1:104;1:0;1:100;1:0;4:100;2:0;2:100;4:0;1:100;1:210;1:100;1:104;3:0;1:100;1:0;1:20;26:0;1:1;19:0;2:21;2:0;2:20;42:0;20:21;5:0;1:20;26:0;1:1;1:0;1:100;11:0;1:100;9:0;2:20;7:0;1:21;57:0;1:21;1:0;1:20;26:0;1:1;1:0;1:20;2:100;5:0;1:100;2:0;1:100;1:20;1:0;1:100;4:0;1:100;2:0;2:20;39:0;2:100;1:0;2:100;1:0;1:100;21:0;1:20;26:0;1:1;3:21;2:100;3:0;1:100;1:21;2:100;11:21;2:20;1:104;1:0;1:210;2:0;1:104;24:0;1:104;8:0;1:100;2:0;1:100;1:0;2:100;2:0;1:100;1:210;4:0;1:100;6:0;1:100;2:0;1:210;1:0;1:104;1:20;26:0;5:1;1:100;1:0;1:100;1:0;1:100;1:1;1:20;13:1;1:20;6:21;24:0;38:21;26:0;5:1;1:20;1:0;1:1;1:0;24:1;22:50;65:1",
    l_3_file = "120;20;0:0;6:51;25:1;8:51;6:1;3:51;64:1;6:51;2:1;4:51;16:1;2:0;6:1;1:0;2:1;5:51;2:1;1:51;8:1;3:51;4:1;1:0;4:1;2:0;11:1;3:0;2:1;4:0;11:1;6:0;4:1;4:0;8:1;2:51;4:1;1:51;5:1;2:0;4:1;1:0;6:1;4:0;4:1;2:0;4:1;3:51;2:1;1:51;4:0;4:1;1:51;4:1;3:0;2:1;7:0;6:1;6:0;1:1;9:0;3:1;17:0;16:1;1:0;3:1;8:0;4:1;5:0;3:1;4:0;4:1;1:51;3:1;1:51;7:0;4:1;6:0;1:1;8:0;3:1;39:0;13:22;1:1;3:0;2:1;8:0;3:1;8:0;1:1;5:0;6:1;1:0;1:51;8:0;2:1;7:0;1:1;9:0;3:1;17:0;2:100;2:0;2:100;2:0;1:100;3:0;1:100;5:0;2:100;14:0;1:1;3:0;1:1;5:0;1:1;3:0;2:1;16:0;5:1;1:50;1:51;1:24;8:0;1:1;18:0;2:1;4:0;6:100;3:0;3:100;4:0;1:100;2:0;1:100;3:0;1:100;3:0;3:100;3:0;1:100;2:0;1:104;1:0;1:210;3:0;2:210;1:0;1:210;1:104;1:1;7:0;4:1;2:0;2:1;16:0;4:1;1:0;1:51;1:24;28:0;2:1;2:0;2:1;6:21;3:0;3:21;4:0;1:21;2:0;1:21;3:0;1:21;3:0;3:21;3:0;1:21;13:22;1:1;8:0;3:1;3:0;1:1;5:0;7:100;4:0;4:1;1:50;1:51;1:24;10:0;1:104;1:210;2:0;1:104;1:0;1:1;11:0;2:1;3:0;2:1;3:24;6:0;1:24;17:0;1:24;3:0;2:24;14:1;9:0;1:1;10:0;7:100;5:0;3:1;1:51;1:1;4:0;3:100;5:0;3:1;2:50;2:1;11:0;2:1;3:0;1:1;2:24;7:0;1:24;17:0;1:24;4:0;1:24;14:1;19:0;1:104;1:0;1:210;1:0;1:210;1:0;1:210;1:0;1:104;4:0;2:1;2:51;1:1;10:0;4:1;1:23;2:51;2:1;12:0;2:1;2:0;1:1;1:24;8:0;1:24;17:0;1:24;4:0;1:24;14:1;19:0;9:1;4:0;5:1;4:0;3:21;7:0;1:1;1:51;1:1;5:0;2:100;10:0;3:1;8:0;1:24;17:0;1:24;4:0;16:1;16:0;3:1;7:0;2:1;4:0;3:1;5:0;1:24;1:0;1:24;8:0;1:51;1:1;17:0;3:1;8:0;1:24;17:0;1:24;4:0;6:1;5:0;5:1;4:0;1:106;27:0;1:1;18:0;1:51;6:0;2:1;9:0;4:1;8:0;1:24;17:0;1:24;4:0;5:1;8:0;3:1;45:0;1:1;5:0;1:51;6:0;2:1;9:0;4:1;8:0;1:24;17:0;1:24;4:0;5:1;8:0;1:1;1:23;1:1;9:0;2:100;12:0;1:100;20:0;2:1;5:0;1:51;5:0;3:1;2:0;1:1;5:0;5:1;8:0;1:24;17:0;1:24;3:0;5:1;10:5;1:51;2:1;7:0;1:100;2:1;2:0;3:100;6:0;1:100;1:1;16:0;2:1;1:0;4:1;4:0;1:51;5:0;6:1;2:0;2:1;1:0;5:1;8:0;1:24;17:0;1:24;3:0;5:1;9:6;1:1;2:51;2:1;5:0;1:100;3:1;2:0;3:1;5:0;1:100;2:1;7:0;3:100;2:0;2:100;1:0;7:1;2:0;2:1;1:0;1:51;5:0;6:1;5:0;5:1;8:50;1:24;17:50;1:24;3:50;7:1;7:6;2:1;3:51;5:50;4:1;2:50;2:1;3:100;2:0;5:1;1:0;3:100;1:0;1:1;3:0;2:1;2:0;7:1;4:0;1:1;1:0;1:51;3:0;4:1;2:51;2:1;1:104;1:210;1:0;1:104;3:1;2:51;1:1;8:51;1:24;17:51;1:24;6:51;4:1;7:6;7:1;3:51;3:1;3:51;5:1;1:0;7:1;3:0;7:1;2:50;6:1;7:50;1:51;1:50;4:1;4:51;8:1;12:51;1:24;17:51;1:24;1:51;2:1;4:51;4:1;5:6;10:1;4:51;16:1;3:50;27:1;6:51;9:1;1:51;2:1;7:51;1:24;17:51;1:24;5:1;3:51;4:1;4:6;2:1",
    l_basti_1_file = "120;20;0:0;82:24;38:0;82:24;38:0;2:24;27:100;1:20;3:23;2:24;3:23;1:20;41:0;2:24;38:0;2:24;28:100;1:20;2:23;2:24;2:23;1:20;3:0;13:100;26:0;2:24;38:0;2:24;1:104;2:100;1:210;1:100;1:104;1:100;2:21;20:100;1:20;1:23;2:24;1:23;1:20;4:0;1:21;2:0;1:21;2:0;1:21;2:0;1:21;2:0;1:21;1:0;1:100;24:0;2:24;38:0;2:24;6:21;9:100;1:104;7:100;1:210;5:100;1:104;1:20;2:24;1:20;3:0;1:22;15:50;1:22;24:0;2:24;38:0;2:24;15:100;15:21;1:100;2:24;1:100;2:0;1:21;9:22;1:51;2:22;1:51;4:22;24:0;2:24;38:0;2:24;7:100;2:21;22:100;2:24;1:100;12:0;1:51;2:0;1:51;28:0;2:24;38:0;2:24;1:104;1:210;3:100;1:104;7:100;2:21;16:100;2:24;1:100;12:0;1:51;2:0;1:51;5:0;1:100;22:0;2:24;38:0;2:24;6:21;9:100;1:104;2:100;1:210;11:100;1:104;2:24;2:100;1:20;10:50;1:51;2:50;1:51;5:50;1:20;1:0;1:100;20:0;2:24;38:0;2:24;15:100;16:21;2:24;2:100;1:20;19:51;1:20;1:0;1:100;20:0;2:24;38:0;2:24;7:100;2:21;22:100;2:24;1:21;1:100;1:20;19:51;1:20;1:0;1:100;20:0;2:24;38:0;2:24;1:104;2:100;1:210;1:100;1:104;7:100;2:21;16:100;2:24;1:0;1:100;1:20;19:51;1:20;1:0;1:100;20:0;2:24;38:0;2:24;6:21;8:100;1:104;11:100;1:210;1:100;1:104;2:100;2:24;1:0;1:100;4:20;1:51;16:20;1:0;1:100;20:0;2:24;38:0;2:24;11:100;2:21;1:100;15:21;4:100;1:0;1:21;4:0;1:51;17:0;1:100;20:0;2:24;38:0;2:24;1:104;1:100;1:210;2:100;1:104;1:100;2:21;24:100;6:0;1:51;17:0;1:100;20:0;2:24;38:0;2:24;6:21;3:100;2:21;20:100;2:21;6:100;1:51;4:100;13:0;1:100;20:0;2:24;38:0;2:24;31:100;2:20;1:21;5:100;1:51;4:100;2:0;1:104;30:210;1:104;2:24;38:0;2:24;37:2;2:24;1:51;4:24;2:50;8:24;24:2;2:24;38:0;2:24;37:1;1:24;15:51;1:24;24:1;2:24;38:0",
    l_basti_2_file = "200;20;301;0:0;200:5;3:6;3:20;5:23;1:20;5:23;46:20;5:23;42:6;9:23;44:6;22:20;17:6;2:20;2:100;1:23;3:5;1:23;1:106;1:23;3:50;1:23;46:0;1:23;3:50;1:23;42:6;1:23;3:5;1:23;3:50;1:23;43:6;2:20;20:0;2:20;15:6;2:20;3:100;1:23;3:6;1:23;1:100;1:23;3:51;1:23;3:0;3:100;1:0;1:100;2:0;1:100;1:0;1:100;3:0;1:100;1:0;2:100;3:0;1:100;2:0;1:100;1:0;1:100;2:0;2:100;2:0;1:100;2:0;1:100;1:0;1:100;2:0;1:100;2:0;1:23;3:51;1:23;1:20;40:6;1:20;1:23;3:6;1:23;3:51;1:23;1:20;42:6;1:20;1:0;4:100;1:0;1:100;2:0;1:100;1:0;1:100;3:0;1:100;1:0;1:100;2:0;1:100;1:0;1:20;15:6;1:20;4:100;1:0;1:23;1:6;1:23;1:0;1:100;1:0;1:23;1:51;1:23;6:0;1:100;1:0;1:100;2:0;1:100;1:0;2:100;1:0;2:100;1:0;1:100;1:0;1:100;2:0;2:100;1:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;1:0;1:100;2:0;1:100;1:0;2:100;1:0;1:100;3:0;1:23;1:51;1:23;1:0;2:20;38:6;2:20;1:0;1:23;1:6;1:23;1:0;1:23;1:51;1:23;1:0;2:20;32:6;10:20;4:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;3:0;1:100;1:0;1:100;2:0;1:100;1:0;13:20;3:6;1:20;4:100;2:0;1:6;2:0;1:100;2:0;1:51;7:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;1:0;1:100;1:0;1:100;1:0;2:100;3:0;1:100;1:0;2:100;4:0;2:100;2:0;1:100;2:0;1:100;1:0;1:100;1:0;2:100;4:0;1:51;3:0;2:20;36:6;2:20;3:0;1:6;3:0;1:51;3:0;30:20;2:6;2:20;8:0;1:20;4:0;1:100;1:0;1:100;2:0;1:100;1:0;5:100;1:0;1:100;2:0;1:100;1:0;1:20;11:0;2:20;2:6;1:20;2:100;1:21;1:100;2:0;1:6;2:0;1:100;2:0;1:51;7:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;3:0;1:100;1:0;1:100;4:0;1:100;2:0;1:100;4:0;1:100;1:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;2:0;1:100;4:0;1:51;4:0;2:20;34:6;2:20;4:0;1:6;3:0;1:51;32:0;2:20;1:6;1:20;1:104;7:210;1:104;1:20;4:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;3:0;1:100;1:0;1:100;2:0;1:100;1:0;1:20;1:104;10:210;1:104;1:20;2:6;1:20;4:100;2:0;1:6;2:0;1:100;2:0;1:51;5:0;2:100;3:0;2:100;2:0;1:100;3:0;1:100;1:0;1:100;4:0;1:100;2:0;1:100;4:0;1:100;1:0;1:100;2:0;2:100;2:0;1:100;2:0;1:100;2:0;1:23;1:50;1:51;1:50;1:23;3:0;36:20;5:0;1:6;3:0;1:51;33:0;3:20;9:21;1:20;4:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;3:0;1:100;1:0;1:100;2:0;1:100;1:0;1:20;12:21;1:20;2:6;1:20;1:21;3:100;2:0;1:6;2:0;1:100;2:0;1:51;48:0;1:23;3:51;1:23;44:0;1:6;3:0;1:51;34:0;2:20;9:5;1:20;1:0;3:100;3:0;2:100;2:0;1:100;3:0;1:100;2:0;2:100;2:0;1:20;13:5;1:6;2:20;4:100;2:0;1:6;2:0;1:100;2:0;1:51;48:0;2:23;1:51;2:23;42:0;1:23;1:5;1:6;1:5;1:23;1:50;1:51;1:50;1:23;3:0;1:21;3:0;1:21;3:0;1:21;3:0;1:21;3:0;1:21;3:0;4:21;6:0;11:20;22:0;17:20;2:100;1:21;1:100;2:0;1:6;2:0;1:100;2:0;1:51;49:0;3:23;43:0;1:23;3:6;1:23;3:51;1:23;23:0;1:20;2:50;1:20;6:0;3:100;2:0;4:100;2:0;3:100;3:0;2:100;2:0;1:100;2:0;1:100;2:0;2:100;2:0;4:100;1:0;4:100;1:0;5:100;2:20;1:50;1:20;4:100;2:0;1:6;2:0;1:100;2:0;1:51;66:0;1:100;3:0;1:100;3:0;1:100;3:0;1:100;3:0;1:100;3:0;1:100;2:0;2:100;4:0;2:23;1:6;3:23;1:51;2:23;23:0;1:20;2:51;1:20;1:21;4:0;1:100;5:0;1:100;4:0;1:100;3:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;4:0;1:100;6:0;1:100;2:0;1:20;1:50;1:51;1:20;1:21;3:100;1:23;1:5;1:6;1:5;1:23;1:100;1:23;1:50;1:51;1:50;1:23;62:0;1:100;3:0;1:21;3:0;1:21;3:0;1:21;3:0;1:21;3:0;1:21;3:0;4:21;4:0;3:23;1:0;3:23;3:0;1:21;20:0;1:20;2:51;1:50;1:20;4:0;1:100;5:0;1:100;4:0;1:100;5:0;1:100;4:0;1:100;2:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;4:0;1:100;6:0;1:100;2:0;1:20;2:51;1:20;4:100;1:23;3:6;1:23;1:100;1:23;3:51;1:23;9:0;1:100;4:0;1:100;4:0;1:100;4:0;1:100;4:0;1:100;4:0;1:100;4:0;1:100;4:0;1:100;2:0;3:100;10:0;1:100;3:0;1:21;21:0;1:20;2:50;1:20;1:21;33:0;2:20;3:51;1:20;1:21;3:0;1:100;5:0;3:100;2:0;1:100;5:0;1:100;4:0;4:100;1:0;1:100;2:0;1:100;1:0;3:100;2:0;3:100;4:0;1:100;2:0;1:20;2:51;1:20;2:100;1:21;1:100;2:23;1:6;2:23;1:100;2:23;1:51;2:23;5:0;1:100;5:0;2:21;3:0;2:21;3:0;2:21;3:0;2:21;3:0;2:21;3:0;2:21;3:0;2:21;3:0;5:21;7:0;1:100;3:0;1:21;23:0;1:20;2:51;1:50;1:20;1:21;16:0;1:104;1:210;1:0;1:210;1:0;1:210;1:0;1:210;1:0;1:210;1:0;1:210;1:0;1:210;1:104;2:20;1:50;3:51;1:50;1:20;3:0;1:100;2:0;2:100;1:0;1:100;5:0;3:100;2:0;1:100;4:0;1:100;2:0;1:100;1:0;4:100;1:0;1:100;4:0;1:100;6:0;1:100;2:0;1:20;2:51;1:20;4:100;1:0;3:23;1:0;1:100;1:0;3:23;8:0;2:21;2:0;1:20;38:50;1:20;1:21;8:0;1:21;24:0;1:21;1:20;3:51;1:50;1:20;1:21;10:0;1:21;4:0;15:21;1:20;1:50;5:51;1:20;1:21;2:0;1:100;3:0;1:100;1:0;1:100;8:0;1:100;1:0;1:100;4:0;1:100;2:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;4:0;1:100;6:0;1:100;2:0;1:20;2:51;1:20;1:21;3:100;5:0;1:100;6:0;1:100;1:0;2:21;2:0;1:20;4:50;38:51;1:50;1:20;1:21;5:0;1:21;25:0;1:21;1:20;1:50;4:51;1:50;1:20;1:21;13:0;1:21;1:20;15:50;6:51;1:50;1:20;2:0;1:100;3:0;1:100;1:0;1:100;4:0;1:100;3:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;4:0;1:100;6:0;1:100;1:0;1:21;1:20;2:51;1:50;1:20;1:21;2:100;5:0;1:100;8:0;1:20;4:50;43:51;1:50;1:20;1:21;1:0;2:100;6:0;1:104;1:210;1:0;1:210;1:0;1:210;1:0;1:210;1:0;1:210;1:0;1:210;1:0;1:210;1:0;1:210;1:0;1:210;1:0;1:210;1:21;1:20;1:50;6:51;1:50;1:20;1:21;11:0;1:21;1:20;1:50;22:51;1:20;1:21;2:0;3:100;2:0;4:100;2:0;3:100;3:0;2:100;2:0;1:100;2:0;1:100;1:0;1:100;2:0;1:100;1:0;1:100;4:0;1:100;6:0;1:100;1:21;1:20;1:50;3:51;1:50;1:20;16:21;1:50;48:51;1:50;1:20;29:21;1:20;1:50;8:51;1:50;1:20;11:21;1:20;1:50;23:51;1:50;1:20;46:21;1:20;1:50;5:51;17:50;50:51;31:50;10:51;13:50;25:51;48:50;3:51",
    l_evil_cave_file = "300;20;301;0:0;29:1;14:6;32:1;13:51;8:1;28:20;1:24;8:0;1:23;8:0;1:23;8:0;1:23;8:0;1:23;8:0;1:23;12:0;1:24;2:1;1:51;1:1;26:51;35:1;29:22;55:1;1:6;1:1;4:6;11:1;6:0;18:1;1:51;6:1;5:51;5:1;1:51;5:1;28:20;1:24;7:0;3:24;6:0;3:24;6:0;3:24;6:0;3:24;6:0;3:24;11:0;1:24;5:1;3:51;2:1;3:51;1:1;14:51;35:1;2:22;13:1;12:0;35:1;9:0;2:1;4:0;9:1;2:6;1:1;4:6;8:1;3:0;3:100;3:0;18:1;1:51;6:1;8:51;7:1;28:20;1:24;6:0;1:24;3:0;1:24;4:0;1:24;3:0;1:24;4:0;1:24;3:50;1:24;4:0;1:24;3:0;1:24;4:0;1:24;3:5;1:24;10:0;1:24;11:1;2:51;2:1;2:51;2:1;4:51;1:1;3:51;25:1;3:0;6:1;2:22;12:1;18:0;28:1;1:0;3:1;20:0;8:1;2:6;4:1;8:0;1:100;8:0;25:1;4:51;8:1;28:20;1:24;5:0;1:24;5:5;1:24;2:0;1:24;5:50;1:24;2:0;1:24;5:51;1:24;2:0;1:24;5:0;1:24;2:0;1:24;5:6;1:24;9:0;1:24;19:1;1:51;3:1;1:51;1:1;2:51;24:1;5:0;3:1;2:22;13:1;11:0;1:104;1:0;1:210;1:0;1:104;9:0;21:1;9:0;2:100;15:0;14:1;3:0;1:100;3:0;1:1;3:0;1:1;5:0;27:1;2:51;7:1;28:20;1:24;6:0;1:24;3:6;1:24;4:0;1:24;3:51;1:24;4:0;1:24;3:51;1:24;4:0;1:24;3:5;1:24;4:0;1:24;3:6;1:24;10:0;2:22;2:23;10:22;2:23;5:22;2:0;3:22;1:23;1:51;10:22;2:23;10:22;8:0;2:22;8:1;3:0;3:1;3:0;1:104;3:0;1:210;1:104;3:0;5:21;11:0;8:1;1:0;3:1;1:0;7:1;7:0;1:100;2:0;1:100;14:0;12:1;7:0;3:1;3:0;2:1;1:0;1:100;3:0;35:1;3:20;17:0;8:20;1:24;7:0;3:24;6:0;3:24;6:0;3:24;6:0;3:24;6:0;3:24;13:0;2:23;10:0;2:23;10:0;1:23;1:51;2:0;1:100;3:0;1:100;3:0;2:23;20:0;7:1;10:0;6:21;21:0;5:1;6:0;7:1;2:0;1:100;14:0;1:100;10:0;8:1;4:0;7:1;3:0;3:1;4:0;10:1;27:20;19:0;7:20;1:24;84:0;1:51;1:0;1:100;1:0;1:100;2:0;1:100;28:0;3:1;40:0;3:1;1:0;1:100;3:0;1:100;6:1;2:0;1:100;2:0;2:1;6:0;3:1;3:0;1:100;9:0;7:1;5:0;7:1;3:0;4:1;6:0;7:1;2:23;10:22;2:23;10:22;2:23;79:0;1:100;11:0;1:100;3:0;1:100;16:0;1:51;2:100;3:0;1:100;2:0;1:100;18:0;1:100;8:0;3:1;21:0;4:1;1:104;1:0;1:210;2:0;1:210;3:0;1:104;7:0;1:100;1:0;4:100;5:1;6:0;1:1;6:0;5:1;14:0;4:1;9:0;3:1;3:0;5:1;13:0;2:23;10:0;2:23;10:0;2:23;78:0;1:100;10:0;1:100;3:0;1:100;3:0;1:100;2:0;1:1;3:0;1:1;7:0;1:51;4:100;1:1;2:0;1:100;18:0;1:100;1:0;1:100;7:0;4:1;6:0;2:21;9:0;16:21;8:0;6:100;1:0;4:1;2:0;2:1;11:0;2:1;5:0;3:1;7:0;4:1;3:0;2:1;4:0;2:1;3:0;5:1;44:0;1:21;3:50;1:21;3:0;1:21;3:50;1:21;14:0;1:100;41:0;1:100;3:0;1:100;9:0;2:23;10:0;2:23;1:0;3:1;7:0;1:51;2:100;1:0;3:1;1:0;1:1;1:100;1:0;2:23;1:104;1:0;1:210;3:0;1:210;1:0;1:104;15:0;2:21;9:0;2:1;1:104;1:210;2:0;1:104;6:1;8:0;6:1;6:0;1:100;2:0;1:100;1:0;1:100;1:0;1:100;2:0;2:1;3:0;1:1;16:0;9:1;3:0;4:1;3:0;3:1;3:0;2:1;3:0;3:1;46:0;1:24;3:51;1:24;3:0;1:24;3:51;1:24;9:0;3:100;2:0;1:100;7:0;4:100;9:0;1:100;7:0;1:21;6:0;1:100;4:0;1:100;1:0;1:100;5:0;1:21;4:0;2:21;2:23;10:21;2:23;2:22;2:21;2:0;1:21;4:0;1:51;1:0;9:21;2:23;10:21;26:0;9:1;14:0;2:1;6:0;4:100;1:0;5:100;1:0;2:1;23:0;6:1;5:0;2:1;2:0;4:1;4:0;2:1;2:0;2:1;6:0;3:1;1:0;1:1;10:0;1:100;1:0;1:100;1:0;1:100;8:0;1:100;1:0;1:100;1:0;1:100;9:0;3:24;5:0;3:24;50:0;1:100;1:0;1:100;16:0;1:24;21:1;5:0;1:51;2:0;5:1;9:0;7:1;15:0;3:100;10:0;5:1;21:0;4:1;2:100;1:0;2:100;1:0;6:1;24:0;5:1;8:0;5:1;3:0;2:1;3:0;1:1;4:0;3:1;1:0;3:1;6:0;2:23;10:0;2:23;10:0;2:23;21:0;1:100;2:0;1:100;1:0;3:21;6:0;3:21;6:0;3:21;2:0;1:21;6:0;3:21;11:0;1:21;5:0;1:21;8:0;1:24;20:1;5:0;1:23;1:51;2:50;4:1;2:0;1:104;1:0;1:210;3:0;1:104;3:0;6:1;2:0;2:100;9:0;1:100;3:0;3:100;2:1;30:0;17:1;24:0;6:1;7:0;5:1;4:0;1:1;3:0;1:1;3:0;14:1;2:23;10:21;2:23;10:21;2:23;27:0;1:22;8:0;1:22;8:0;1:22;11:0;1:22;7:0;1:21;19:0;1:24;22:1;3:0;3:1;1:51;4:1;3:0;5:1;6:0;1:1;5:0;2:1;3:0;2:100;1:0;2:1;1:100;4:0;5:1;18:0;1:100;11:0;17:1;24:0;8:1;1:0;2:100;1:0;7:1;11:0;14:1;26:20;1:21;19:0;7:21;1:22;8:0;1:22;8:0;1:22;11:0;1:22;27:0;1:24;23:1;5:0;3:1;4:0;2:1;15:0;6:1;2:0;3:1;6:0;4:1;12:0;2:100;4:0;1:1;10:0;20:1;11:0;1:106;9:0;3:1;2:0;6:1;1:0;8:1;10:0;40:1;2:20;1:21;1:104;4:0;1:210;7:0;1:210;2:0;1:104;1:21;7:20;1:22;8:0;1:22;8:0;1:22;11:0;1:22;27:50;1:24;24:1;27:0;13:1;5:50;5:1;2:100;9:0;2:1;14:0;10:1;2:0;2:1;1:0;7:1;18:0;5:1;3:0;16:1;1:104;1:0;1:210;2:0;1:104;1:1;1:0;40:1;3:20;17:21;8:20;1:22;8:0;1:22;8:0;1:22;11:0;1:22;27:51;1:24;25:1;7:0;1:100;1:0;1:100;13:0;12:1;2:51;3:1;3:51;1:1;1:51;6:1;2:100;7:0;1:1;12:0;6:1;1:0;6:1;6:0;6:1;17:0;5:1;5:5;31:1;2:51;4:1;1:51;1:1;3:51;21:1;28:20;1:22;8:0;1:22;8:0;1:22;11:0;1:22;27:51;1:24;25:1;4:0;1:100;2:0;3:1;3:0;2:1;1:104;2:0;1:210;2:0;1:104;13:1;11:51;7:1;4:100;13:0;1:100;2:0;5:1;3:0;3:1;8:0;9:1;4:0;6:1;1:0;7:1;9:6;27:1;4:51;1:1;3:51;2:1;1:51;22:1;28:20;1:22;1:104;2:210;1:0;1:210;1:0;1:210;1:104;1:22;1:104;3:210;1:0;2:210;1:104;1:22;1:104;2:210;1:0;1:210;1:0;1:210;1:0;2:210;1:104;1:22;27:51;1:24;26:1;3:50;6:1;2:50;19:1;2:23;3:1;1:51;2:1;5:51;13:1;13:0;1:1;2:0;4:1;15:5;26:1;11:6;24:1;9:51;26:1;28:20;1:22;8:21;1:22;8:21;1:22;11:21;1:22;27:51;1:24;54:1;6:23;5:1;3:51;14:1;16:50;3:1;16:6";
    

var tiles_x = 0,
    tiles_y = 0,
    tile_size = 20;

var camera = {};

var cur_scene = "menu";

camera.position = [0, 0];
camera.speed = 1.5;

var world = [],
    physic_world = [];

var player = {},
    shot   = {};

player.position = [];
player.startposition = [140, 100];
player.state = [1, [0, 1, 0, 0]];   //0=move; 1=direction(rechts, unten, links, oben)
player.health = 100;
player.maxhealth = 100;
player.energy = 0;
player.energy_show = 0;
player.move_speed = 2;
player.fall_speed = 2;
player.jump_speed = 2;
player.jump_heigth = 60;
player.jump_state = 0;
player.jump_start = 0;
player.col_margin = 2;

shot.list = [];
shot.speed = 6;
shot.damage = 50;
shot.reload = 15;
shot.time = 0;
shot.worth = 15;
shot.maxHits = 3;

var tiles = [],
    explosions = [];

var tiles_load = [ [1, "tile_stone.png"],
                   [2, "tile_grass.png"],
                   [3, "tile_bark.png"],
                   [4, "tile_leaves.png"],
                   [5, "tile_water.png", 2, 30],
                   [6, "tile_water_2.png", 2, 30],
                  
                   [20, "tile_l_metal_4.png"],
                   [21, "tile_l_ground_1.png"],
                   [22, "tile_l_metal_2.png"],
                   [23, "tile_l_metal_3.png"],
                   [24, "tile_l_metal_1.png"],
                   [25, "tile_l_pipe_1.png"],
                   [26, "tile_l_pipe_2.png"],
                   [27, "tile_l_pipe_3.png"],
                   [28, "tile_l_pipe_4.png"],
                   [29, "tile_l_pipe_5.png"],
                   [50, "tile_acid.png", 2, 30],
                   [51, "tile_acid_2.png", 2, 30],
                         
                   [100, "tile_coin.png", 12, 6] ];

var images = [];

var images_load = [ [200, "player_still.png"],
                    [201, "player_walk.png", 2, 20],
                    [210, "npc_mixer_still.png", 2, 30],
                    [211, "npc_mixer_hunt.png", 2, 15],
                    [103, "shot.png"],
                    [105, "explosion_1.png", 13, 7],
                    [300, "background_1.png"],
                    [301, "background_2.png"],
                    [310, "vignette.png"],
                    [315, "logo_2.png"],
                    [316, "choose_level.png"],
                    [350, "buttons/play_on.png"],
                    [351, "buttons/play_off.png"],
                    [352, "buttons/level_on.png"],
                    [353, "buttons/level_off.png"],
                    [354, "buttons/download_on.png"],
                    [355, "buttons/download_off.png"],
                    [360, "buttons/l_1_on.png"],
                    [361, "buttons/l_1_off.png"],
                    [362, "buttons/l_2_on.png"],
                    [363, "buttons/l_2_off.png"],
                    [364, "buttons/l_3_on.png"],
                    [365, "buttons/l_3_off.png"],
                    [366, "buttons/back_on.png"],
                    [367, "buttons/back_off.png"],
                    [368, "buttons/userlevel_on.png"],
                    [369, "buttons/userlevel_off.png"]];

var sounds = [];

var sounds_load = [ [0, "RadioactivePotato.mp3"],
                    [1, "shot.mp3"],
                    [2, "coin.mp3"],
                    [3, "die.mp3"],
                    [20, "explosion_1.mp3"],
                    [21, "explosion_2.mp3"],
                    //[22, "explosion_3.mp3"],
                    [22, "explosion_4.mp3"]];

var enemies = [];

var enemies_val = [["Mixer", 0.5, 100, 1, [["wait", "EnemyWait", 210],
                                            ["patrol", "EnemyPatrol", 210],
                                            ["hunt", "MixerHunt", 211]]],   // Name, speed, health, damage, states_functions   
                   ["Spoon", 2, 100, 10, [["wait", "SpoonWait", 215],
                                          ["patrol", "SpoonPatrol", 216]]]
                  ];

var buttons = [];

var buttons_val = [["play", "menu", [150, 200], ["startLevel", "l_1"], 350, 351],
                   ["level", "menu", [320, 200], ["setScene", "level"], 352, 353],
                   ["download", "menu", [490, 200], ["openLink", "Editor.rar"], 354, 355],            
                   ["l_1", "level", [270, 150], ["startLevel", "l_1"], 360, 361],
                   ["l_2", "level", [360, 150], ["startLevel", "l_2"], 362, 363],
                   ["l_3", "level", [450, 150], ["startLevel", "l_3"], 364, 365],
                   ["userlevel", "level", [320, 250], ["setScene", "userlevel"], 368, 369],
                   ["back", "level", [10, 330], ["setScene", "menu"], 366, 367],
                   ["back", "l_1", [10, 330], ["setScene", "level"], 366, 367],
                   ["back", "l_2", [10, 330], ["setScene", "level"], 366, 367],
                   ["back", "l_3", [10, 330], ["setScene", "level"], 366, 367],
                   ["back", "userlevel", [10, 330], ["setScene", "level"], 366, 367],
                   ["back", "l_b_1", [10, 330], ["setScene", "level"], 366, 367],
                   ["back", "l_b_2", [10, 330], ["setScene", "level"], 366, 367],
                   ["back", "l_evil_cave", [10, 330], ["setScene", "level"], 366, 367],
                   ["play", "userlevel", [630, 310], ["startUserLevel"], 350, 351]];

var levels = [];

var levels_val = [["Green Hills", l_1_file, "l_1", 300, 120, 20, "admin"],
                  ["Laboratory", l_2_file, "l_2", 301, 120, 20, "admin"],
                  ["The Cave", l_3_file, "l_3", 301, 120, 20, "admin"],
                  ["The Evil Cave", l_evil_cave_file, "l_evil_cave", 301, 300, 20, "Crispi"],
                  ["Extrem-Test", l_basti_1_file, "l_b_1", 301, 120, 20, "Jonaruto2"],
                  ["Jump'n'Run", l_basti_2_file, "l_b_2", 301, 200, 20, "Jonaruto2"]];    // name, file, scene, background_image_id, tiles_x, tiles_y, author


// OBJECTS

function ButtonObj (name, scene, pos, action, img_on, img_off) {
    "use strict";
    
    var that = {};
					
    that.name = name;
    that.scene = scene;
    that.position = pos;
    that.action = action;
    that.img_on = img_on;
    that.img_off = img_off;
    that.m_over = 0;
    that.m_click = 0;

    return that;
}

function LevelObj (name, file, scene, bg_id, tiles_x, tiles_y, author) {
    "use strict";
    
    var that = {};
					
    that.name = name;
    that.scene = scene;
    that.bg_id = bg_id;
    that.file = file;
    that.tiles_x = tiles_x;
    that.tiles_y = tiles_y;
    that.author = author;
    that.selected = 0;

    return that;
}

function SpriteObj (image, frames, speed) {
    "use strict";
    
    var that = {};
					
    that.width = image.width;
    that.height = image.height;
    that.image = image;
    that.frames = frames;
    that.speed = speed;
    that.frameCount = 1;
    that.timeCount = 0;

    return that;
}

function ImageObj (image) {
    "use strict";
    
    var that = {};
					
    that.width = image.width;
    that.height = image.height;
    that.image = image;

    return that;
}

function SoundObj (sound) {
    "use strict";
    
    var that = {};
					
    that.duration = sound.duration;
    that.loop = sound.loop;
    that.sound = sound;

    return that;
}

function EnemyObj (name, speed, health, damage, states) {
    "use strict";
    
    var that = {};
					
    that.name = name;
    that.position = [];
    that.damage = damage;
    that.borders = [[], []];
    that.move_state = 0;
    that.speed = speed;
    that.state = "";
    that.health = health;
    that.states = states;
    that.jump_heigth = 60;
    that.jump_state = 0;
    that.jump_start = 0;

    return that;
}

function ExplosionObj (image, position, size, frames, speed) {
    "use strict";
    
    var that = {};
	
    that.image = image;				    
    that.position = position;
    that.size = size;    
    that.frames = frames;
    that.speed = speed;
    that.frameCount = 1;
    that.timeCount = 0;

    return that;
}


// RENDER - FUNCTIONS


function drawTiles(world_list) {
    "use strict";
    
    var w_x,
        w_y; 
    
    for (w_y = 0; w_y < world_list.length; w_y += 1) {
        for (w_x = 0; w_x < world_list[w_y].length; w_x += 1) {
            
            if (world_list[w_y][w_x] !== 0 &&
                w_x * tile_size + tile_size >= camera.position[0] &&
                w_x * tile_size < camera.position[0] + 800) {
                if (tiles[world_list[w_y][w_x]].frames) {
                    ctx.drawImage(tiles[world_list[w_y][w_x]].image,
                                  20 * tiles[world_list[w_y][w_x]].frameCount,
                                  0,
                                  20,
                                  20,
                                  tile_size * w_x - camera.position[0], 
                                  tile_size * w_y,
                                  20,
                                  20);       
                } else {    
                    ctx.drawImage(tiles[world_list[w_y][w_x]].image, 
                                  tile_size * w_x - camera.position[0], 
                                  tile_size * w_y); 
                }
            }
        }
    } 
    /*
    for (w_y = 0; w_y < physic_world.length; w_y += 1) {
        if (tiles[physic_world[w_y][2]].frames) {
            ctx.drawImage(tiles[physic_world[w_y][2]].image,
                          20 * tiles[physic_world[w_y][2]].frameCount,
                          0,
                          20,
                          20,
                          physic_world[w_y][0] - camera.position[0], 
                          physic_world[w_y][1],
                          20,
                          20);       
        } else {    
            ctx.drawImage(tiles[physic_world[w_y][2]].image, 
                          physic_world[w_y][0] - camera.position[0], 
                          physic_world[w_y][1]); 
        }        
    } */
    
}

function drawPlayer() {
    "use strict";
    
    if (player.state[0]) {
        ctx.drawImage(images[201].image,
                      20 * images[201].frameCount,
                      0,
                      20,
                      20,
                      player.position[0] - camera.position[0], 
                      player.position[1],
                      20,
                      20);       
    } else {    
        ctx.drawImage(images[200].image, 
                      player.position[0] - camera.position[0], 
                      player.position[1]); 
    }
}

function drawEnemies() {
    "use strict";
    
    var e;
    
    for (e = 0; e < enemies.length; e += 1) {
        
        var e_state = getEnemyStateValues(enemies[e], enemies[e].state);
        
        if (images[e_state[2]].frames) {
            ctx.drawImage(images[e_state[2]].image,
                          20 * images[e_state[2]].frameCount,
                          0,
                          20,
                          20,
                          enemies[e].position[0] - camera.position[0], 
                          enemies[e].position[1],
                          20,
                          20);       
        } else {    
            ctx.drawImage(images[e_state[2]].image, 
                          enemies[e].position[0] - camera.position[0], 
                          enemies[e].position[1]); 
        }
    }
}

function drawExplosions() {
    "use strict";
    
    var e;
    
    for (e = 0; e < explosions.length; e += 1) {
        ctx.drawImage(images[105].image,
                      20 * explosions[e].frameCount,
                      0,
                      20,
                      20,
                      explosions[e].position[0] - camera.position[0], 
                      explosions[e].position[1],
                      explosions[e].size,
                      explosions[e].size);
    }
}

function drawShots() {
	"use strict";
	
	var i;
    
    for (i=0; i < shot.list.length; i += 1) {
        ctx.drawImage(images[103].image, shot.list[i][0] - camera.position[0], shot.list[i][1]);    
    }
}

function drawText(text, x, y, size, color, align, base, font) {
	"use strict";
	
	ctx.fillStyle = color;
    ctx.border = "3px solid white";
	ctx.font = size + " " + (font || gui_font) ;
	ctx.textAlign = align;
	ctx.textBaseline = base;
	ctx.fillText(text, x, y);
    
}

function drawBackground() {
    "use strict";
    
    if (cur_scene === "menu") {
        ctx.drawImage(images[300].image, 0, 0);
    } else if (cur_scene === "level") {
        ctx.drawImage(images[300].image, 0, 0);
    } else if (cur_scene === "userlevel") {
        ctx.drawImage(images[300].image, 0, 0);
    } else {
        ctx.drawImage(images[getLevelByScene(cur_scene).bg_id].image, 0, 0);
    }
}

function drawVignette() {
    "use strict";
    
    ctx.drawImage(images[310].image, 0, 0);
}

function drawButtons() {
    "use strict";
    
    var b;
    
    for (b = 0; b < buttons.length; b += 1) {
        if (buttons[b].scene === cur_scene) {
            if (buttons[b].m_over) {
                ctx.drawImage(images[buttons[b].img_on].image, 
                              buttons[b].position[0], 
                              buttons[b].position[1]);
            } else {
                ctx.drawImage(images[buttons[b].img_off].image, 
                              buttons[b].position[0], 
                              buttons[b].position[1]);    
            }
        }
    }
}

function drawHead() {
    "use strict";
    
    if (cur_scene === "menu") {
        ctx.drawImage(images[315].image, 250, 15);       
    } else if (cur_scene === "level") {
        ctx.drawImage(images[316].image, 200, 0);    
    } else if (cur_scene === "userlevel") {
        ctx.drawImage(images[316].image, 200, 0);    
    }
}

function drawUserLevels() {
    "use strict";
    
    ctx.fillStyle = "black";
    ctx.fillRect(100, 130, 600, 3);
    
    drawText("Name", 100, 130, "30px", "black", "left", "bottom");
    drawText("Creator", 450, 130, "30px", "black", "left", "bottom");
    
    var l,
        pos = 140;
    
    for (l = 0; l < levels.length; l += 1) {
        if (levels[l].author !== "admin") {
            drawText(levels[l].name, 
             100, 
             pos, 
             "30px",
             "black", 
             "left", 
             "top");
            pos += 40;
        }
        if (levels[l].selected) {
            ctx.fillRect(100, pos - 40, 605, 2);
            ctx.fillRect(100, pos - 5, 605, 2);
        }
    }
    
    pos = 140;
    
    for (l = 0; l < levels.length; l += 1) {
        if (levels[l].author !== "admin") {
            drawText(levels[l].author, 
             450, 
             pos, 
             "30px",
             "black", 
             "left", 
             "top");
            pos += 40;
        }
    }
}


// COLLISSION

function tilePlayerCollision(tile) {
    "use strict";
    
    if (physic_world[tile][2] === 100) {
        removeCoin(tile, 100);
        return 0;
    }
    if (physic_world[tile][2] === 5 ||
        physic_world[tile][2] === 6 ||
        physic_world[tile][2] === 50 ||
        physic_world[tile][2] === 51) {
        player.health = -20;
        return 0;
    }
    
    return 1;
    
}

function tileMixerCollision(enemy, tile) {
    "use strict";
    
    if (physic_world[tile][2] === 5 ||
        physic_world[tile][2] === 6 ||
        physic_world[tile][2] === 50 ||
        physic_world[tile][2] === 51) {
        enemy.health -= 20;
        return 0;
    }
    
    return 1;
    
}

function checkCollision(pos_1, size_1, pos_2, size_2) {
    "use strict";
    if (pos_1[0] + size_1[0] >= pos_2[0]                &&
        pos_1[0]             <= pos_2[0] + size_2[0]    &&
        pos_1[1] + size_1[1] >= pos_2[1]                &&
        pos_1[1]             <= pos_2[1] + size_2[1]) {
        return 1;
    }
    
    return 0;
}

function checkPlayerCollision(direction) {
    "use strict";
    
    var col_tile = 0,
        tile = 0;
    
    for (tile = 0; tile < physic_world.length; tile += 1) {
       /*if (physic_world[tile][2] === 100) {
            if (checkCollision([player.position[0], player.position[1] + player.col_margin], 
                               [20, 20 - 2*player.col_margin], 
                               [physic_world[tile][0], physic_world[tile][1]], 
                               [tile_size, tile_size])) {
                removeCoin(tile, 100);
                return 0;
            }
        }*/
        
        //tilePlayerCollision(tile);
        
        if (direction == 0  &&
            player.position[0] + 20 <= physic_world[tile][0]) {
            if (checkCollision([player.position[0], player.position[1] + player.col_margin], 
                               [20, 20 - 2*player.col_margin], 
                               [physic_world[tile][0], physic_world[tile][1]], 
                               [tile_size, tile_size])) {
                
                if (tilePlayerCollision(tile)) {
                    return 1;
                }
            }
            
        }
        
        if (direction == 2 &&
            player.position[0]  >= physic_world[tile][0] + tile_size) {
            if (checkCollision([player.position[0], player.position[1] + player.col_margin], 
                               [20, 20 - (2*player.col_margin)], 
                               [physic_world[tile][0], physic_world[tile][1]], 
                               [tile_size, tile_size])) {
                if (tilePlayerCollision(tile)) {
                    return 1;
                }
            }
            
        }
        if (direction == 1 &&
            player.position[1] + 20 <= physic_world[tile][1]) {
            
            if (checkCollision([player.position[0] + player.col_margin, player.position[1]], 
                               [20 - (2*player.col_margin), 20], 
                               [physic_world[tile][0], physic_world[tile][1]], 
                               [tile_size, tile_size])) {
                if (tilePlayerCollision(tile)) {
                    return 1;
                }
            }
            
        }
        
        if (direction == 3 &&
            player.position[1] >= physic_world[tile][1] + tile_size) {
            if (checkCollision([player.position[0] + player.col_margin, player.position[1]], 
                               [20 - (2*player.col_margin), 20], 
                               [physic_world[tile][0], physic_world[tile][1]], 
                               [tile_size, tile_size])) {
                if (tilePlayerCollision(tile)) {
                    return 1;
                }
            }           
        }
            
    }
    return 0;
}

function checkEnemyCollision(enemy, direction) {
    "use strict";
    
    var tile = 0;
    
    for (tile = 0; tile < physic_world.length; tile += 1) {
        if (physic_world[tile][2] !== 100) {
            if (direction === 0 &&
                (enemy.position[0] + 20 <= physic_world[tile][0] ||
                 enemy.position[0] + 20 <= enemy.borders[1][0] )) {
                if (checkCollision([enemy.position[0] + enemy.speed, enemy.position[1] + 2], 
                                   [20, 20 - 4], 
                                   [physic_world[tile][0], physic_world[tile][1]], 
                                   [tile_size, tile_size])) {
                    if (tileMixerCollision(enemy, tile)) {
                        return 1;
                    }                
                }
                                
                if (checkCollision([enemy.position[0], enemy.position[1] + 2], 
                                   [20, 20 - 4], 
                                   [enemy.borders[1][0], enemy.borders[1][1]], 
                                   [tile_size, tile_size]) &&
                    enemy.state === "patrol") {

                    return 2;                
                }
                
                if (checkCollision([enemy.position[0], enemy.position[1] + 2], 
                                   [20, 20 - 4], 
                                   [player.position[0], player.position[1]], 
                                   [tile_size, tile_size])) {
                    return 3;                
                }
                    
            }

            if (direction === 2  &&
                (enemy.position[0] >= physic_world[tile][0] + tile_size ||
                 enemy.position[0] >= enemy.borders[0][0] + tile_size)) {
                if (checkCollision([enemy.position[0] - enemy.speed, enemy.position[1] + 2], 
                                   [20, 20 - 4], 
                                   [physic_world[tile][0], physic_world[tile][1]], 
                                   [tile_size, tile_size])) {
                    if (tileMixerCollision(enemy, tile)) {
                        return 1;
                    }                
                }
                if (checkCollision([enemy.position[0], enemy.position[1] + 2], 
                                   [20, 20 - 4], 
                                   [enemy.borders[0][0], enemy.borders[0][1]], 
                                   [tile_size, tile_size]) &&
                    enemy.state === "patrol") {

                    return 2;                
                }
                
                if (checkCollision([enemy.position[0], enemy.position[1] + 2], 
                                   [20, 20 - 4], 
                                   [player.position[0], player.position[1]], 
                                   [tile_size, tile_size])) {
                    return 3;                
                }

            }
            
            if (direction === 1  &&
                enemy.position[1] + 20 <= physic_world[tile][1]) {
                if (checkCollision([enemy.position[0], enemy.position[1] - enemy.speed], 
                                   [20, 24], 
                                   [physic_world[tile][0], physic_world[tile][1]], 
                                   [tile_size, tile_size])) {
                    
                    if (tileMixerCollision(enemy, tile)) {
                        return 1;
                    }
                }

            }
            
            if (direction === 3  &&
                enemy.position[1] >= physic_world[tile][1] + 20) {
                if (checkCollision([enemy.position[0], enemy.position[1] - enemy.speed], 
                                   [20, 20], 
                                   [physic_world[tile][0], physic_world[tile][1]], 
                                   [tile_size, tile_size])) {
                    
                    if (tileMixerCollision(enemy, tile)) {
                        return 1;
                    }
                }

            }

        }
    }
    return 0;
}

function checkShotCollision(pos, di) {
    "use strict";
    
    var col_list = [0, 0, 0, 0],
        tile;
    
    
    for (tile = 0; tile < physic_world.length; tile += 1) {
        if (di[0] > 0  &&            
            pos[0] <= physic_world[tile][0] &&
            physic_world[tile][2] != 100) {
            
            if (checkCollision([pos[0], pos[1] + 2], 
                               [20, 16], 
                               [physic_world[tile][0], physic_world[tile][1]], 
                               [tile_size, tile_size])) {
                col_list[0] = 1;
                return col_list;
            }
            
        }
        
        if (di[0] < 0 &&
            pos[0] >= physic_world[tile][0] &&
            physic_world[tile][2] != 100) {
            if (checkCollision([pos[0], pos[1]], 
                               [20, 20], 
                               [physic_world[tile][0], physic_world[tile][1]], 
                               [tile_size, tile_size])) {
                //alert("Collision! -X");
                col_list[2] = 1;
                return col_list;
            }            
        }
        
        if (di[1] > 0 &&
            pos[1] <= physic_world[tile][0] &&
            physic_world[tile][2] != 100) {
            if (checkCollision([pos[0] + 2, pos[1]], 
                               [16, 20], 
                               [physic_world[tile][0], physic_world[tile][1]], 
                               [tile_size, tile_size])) {
                col_list[1] = 1;
                return col_list;
            }            
        }
        
        if (di[1] < 0 &&
            pos[0] >= physic_world[tile][0] &&
            physic_world[tile][2] != 100) {
            if (checkCollision([pos[0], pos[1] + 2], 
                               [20, 16], 
                               [physic_world[tile][0], physic_world[tile][1]], 
                               [tile_size, tile_size])) {
                col_list[3] = 1;
                return col_list;
            }            
        }        
    }
    return col_list;
}



// PLAYER/NPC - LOGIC

//Player
function movePlayer() {
    //col = checkPlayerCollision();
    events = getInput();
    
    if (!checkPlayerCollision(1)) {                                  //fall
        player.position[1] += player.fall_speed;
        player.state[0] = 1;
        player.state[1][1] = 1;
        player.state[1][3] = 0;
    }

    if (player.jump_state === 1) {                          //jump
        if (!checkPlayerCollision(3) && player.position[1] > (player.jump_start - player.jump_heigth)) {
            player.position[1] -= player.fall_speed + player.jump_speed;
            player.state[1][3] = 1;
            player.state[1][1] = 0;
        } else {
            player.jump_state = 0;   
        }
    }        

        
    if (ElementInList(events, "D")) {
        if (!checkPlayerCollision(0)) {
            player.position[0] += player.move_speed;
            player.state[0] = 1;
            player.state[1][0] = 1;
            player.state[1][2] = 0;
        }
    }
        
    if (ElementInList(events, "A")) {
        if (!checkPlayerCollision(2)) {
            player.position[0] -= player.move_speed;
            player.state[0] = 1;
            player.state[1][2] = 1;
            player.state[1][0] = 0;
        }
    }
    
    if (!(keysdown[65] || keysdown[68])) {
        player.state[0] = 0;
    }
                     
    if (ElementInList(events, "W")) {
        if (checkPlayerCollision(1)) {
            player.jump_state = 1;
            player.jump_start = player.position[1];
            player.state[0] = 1;            
        }
    }
    
    if (ElementInList(events, "Enter")) {
        playerShot();
    }
   
}

function removeCoin(tile, value) {
    "use strict";
    
    if (physic_world[tile][2] === value) {
        world[physic_world[tile][1] / tile_size][physic_world[tile][0] / tile_size] = 0;
        physic_world.splice(tile, 1);
        player.energy += 10;
        sounds[2].sound.play();
    }
}

//Shots
function playerShot() {
    "use strict";
    
    if (shot.time >= shot.reload && player.energy >= shot.worth) {
            var randDi = randDirection();
            shot.list.push([player.position[0], player.position[1], randDi[0], randDi[1], 0]);
            shot.time = 0;
            player.energy -= shot.worth;
            sounds[1].sound.play();
        }
}

function randDirection() {
    "use strict";
	
	var rand_1,
        rand_2 = 0.05 * (Math.random() - 1);
    
    if (player.state[1][0]) {
        rand_1 = Math.random();
    }
    if (player.state[1][2]) {
        rand_1 = -Math.random();       
    }
    
    //rand_1 = 200 - player.position[0];
    //rand_2 = 200 - player.position[1];

	var shot_di_x = rand_1 / Math.sqrt(Math.pow(rand_1, 2) + Math.pow(rand_2, 2));
	var shot_di_y = rand_2 / Math.sqrt(Math.pow(rand_1, 2) + Math.pow(rand_2, 2));
    

    return [shot_di_x, shot_di_y];

}

function moveShots() {
    "use strict";
    
    shot.time += 1;
	
	var i,
        col;
    
    for (i=0; i < shot.list.length; i += 1) {
        shot.list[i][0] += shot.speed * shot.list[i][2];
        shot.list[i][1] += shot.speed * shot.list[i][3];
        col = checkShotCollision([shot.list[i][0], shot.list[i][1]], [shot.list[i][2], shot.list[i][3]]);
        if (col[0] || col[2]) {
            shot.list[i][2] = - shot.list[i][2];
            shot.list[i][4] += 1;
        }
        if (col[1] || col[3]) {
            shot.list[i][3] = - shot.list[i][3];
            shot.list[i][4] += 1;
        }
        if (shot.list[i][4] >= shot.maxHits) {
            shot.list.splice(i, 1);
        }
    }
    
}

//Enemy
function getEnemyStateValues(enemy, state) {
    "use strict";
    
    var prop;
    
    for (prop = 0; prop < enemy.states.length; prop += 1) {
        if (state === enemy.states[prop][0]) {
            return enemy.states[prop];    
        }
    }
    
    return 0;
}

function checkEnemyID(id) {
    "use strict";
    
    var e,
        e_id;
    
    for (e = 0; e < enemies_val.length; e += 1) {
        for (e_id = 0; e_id < enemies_val[e][4].length; e_id += 1) {
            if (id == enemies_val[e][4][e_id][2]) {
                return enemies_val[e];       
            }
        }
    }
    return 0;
}

function doEnemyWork(enemy) {
    "use strict";
    
    var action;
    
    for (action = 0; action < enemy.states.length; action += 1) {
    
        if (enemy.state === enemy.states[action][0]) {
            doEnemyFuntion(enemy.states[action][1], enemy);   
        }
        
    }
    
}
        
function doEnemyFuntion(name, enemy) {
    "use strict";
    
    if (name === "EnemyWait") {
        EnemyWait(enemy);    
    } else if (name === "EnemyPatrol") {
        EnemyPatrol(enemy);    
    } else if (name === "MixerHunt") {
        MixerHunt(enemy);    
    }
            
}

function handleEnemies() {
    "use strict";
    
    var e;
    
    for (e = 0; e < enemies.length; e += 1) {
        
        if (enemies[e].position[0] > camera.position[0] - 100 &&
            enemies[e].position[0] < camera.position[0] + 900) {
        
            doEnemyWork(enemies[e]);

            if (enemies[e].health <= 0) {
                addExplosion(3, [enemies[e].position[0]+10, enemies[e].position[1]+10], [10, 10], 50, 5);
                enemies.splice(e, 1);            
            }
        }
    }
    
}

function EnemyPatrol(enemy) {
    "use strict";
    
    var col,
        s;
    
    if (enemy.move_state === 0) {
            col = checkEnemyCollision(enemy, 0);
            if (col === 0) {
                enemy.position[0] += enemy.speed;
            } else if (col === 2) {
                enemy.move_state = 2;    
            }
        } else if (enemy.move_state === 2) {
            col = checkEnemyCollision(enemy, 2);
            if (col === 0) {
                enemy.position[0] -= enemy.speed;
            } else if (col === 2) {
                enemy.move_state = 0;    
            }    
        }
    
    if (getDistance(player.position, enemy.position) <= 75) {
        enemy.state = "hunt";
        enemy.speed *= 2;
    }
    
    for (s = 0; s <= shot.list.length; s += 1) {
        if (shot.list[s]) {
            if (checkCollision(enemy.position, [20, 20], [shot.list[s][0], shot.list[s][1]], [20, 20])) {
                enemy.health -= shot.damage;
                shot.list.splice(s, 1);
                addExplosion(1, enemy.position, [10, 10], 30, 5);
            }
        }
    }
    
}

function EnemyWait(enemy) {
    "use strict";
    
}

function MixerHunt(enemy) {
    "use strict";
    
    var col,
        s,
        col_up = checkEnemyCollision(enemy, 3),
        col_down = checkEnemyCollision(enemy, 1);
    
    if (player.position[0] > enemy.position[0]) {
        col = checkEnemyCollision(enemy, 0);
        if (col == 0) {
            enemy.position[0] += enemy.speed;
        }
        if (col == 1 && col_down == 1 && col_up == 0 && enemy.jump_state === 0) {
            enemy.jump_state = 1;
            enemy.jump_start = enemy.position[1];
        }
        if (col == 3) {
            player.health -= enemy.damage;
        }
    } else {
        col = checkEnemyCollision(enemy, 2);
        if (col == 0) {
            enemy.position[0] -= enemy.speed;
        }
        if (col == 1 && col_down == 1 && col_up == 0 && enemy.jump_state === 0) {
            enemy.jump_state = 1;
            enemy.jump_start = enemy.position[1];
        }
        if (col == 3) {
            player.health -= enemy.damage;
        }
    }
    
    if (enemy.jump_state === 1) {
        if (col_up == 0 && enemy.position[1] > (enemy.jump_start - enemy.jump_heigth)) {
            enemy.position[1] -= 2 * enemy.speed;
        } else {
            enemy.jump_state = 0;
        }
    }
    
    if (col_down === 0) {
        enemy.position[1] += enemy.speed;
    }
    
    for (s = 0; s <= shot.list.length; s += 1) {
        if (shot.list[s]) {
            if (checkCollision(enemy.position, [20, 20], [shot.list[s][0], shot.list[s][1]], [20, 20])) {
                enemy.health -= shot.damage;
                shot.list.splice(s, 1);
                addExplosion(1, enemy.position, [10, 10], 30, 5);
            }
        }
    }
    
}
    
    
    /*"use strict";
    
    var col = [[0,     // 0 rechts
                0,     // 1 unten
                0,     // 2 links
                0 ],   // 3 oben
               0 ]   // ID
        tile = 0;
    
    size = 10;
    
    for (tile = 0; tile < physic_world.length; tile += 1) {
        if (pos[0] + size >= physic_world[tile][0] &&
                pos[0] + size <= physic_world[tile][0] + (tile_size * 0.5) &&
                pos[1] + size - 1 >= physic_world[tile][1] &&
                pos[1] + 1 <= physic_world[tile][1] + tile_size) {

                col[0][0] = 1;
                col[1] = physic_world[tile][2];
            }

            if (pos[1] + size >= physic_world[tile][1] &&
                pos[1] + size <= physic_world[tile][1] + (tile_size * 0.5) &&
                pos[0] + size - 1 >= physic_world[tile][0] &&
                pos[0] + 1 <= physic_world[tile][0] + tile_size) {

                col[0][1] = 1;
                col[1] = physic_world[tile][2];
            }

            if (pos[0] >= physic_world[tile][0] + (tile_size * 0.5) &&
                pos[0] <= physic_world[tile][0] + tile_size &&
                pos[1] + size - 1 >= physic_world[tile][1] &&
                pos[1] + 1 <= physic_world[tile][1] + tile_size) {

                col[0][2] = 1;
                col[1] = physic_world[tile][2];
            }

            if (pos[1] <= physic_world[tile][1] + tile_size &&
                pos[1] >= physic_world[tile][1] + (tile_size * 0.5) &&
                pos[0] + size - 1 >= physic_world[tile][0] &&
                pos[0] + 1 <= physic_world[tile][0] + tile_size) {

                col[0][3] = 1;
                col[1] = physic_world[tile][2];
            }  
    }
    
    return col;
}*/


// GAME FUNCTIONS


function fillWorld(value) {
    "use strict";
    
    var x, 
        y;
    
    for (y = 0; y < tiles_y; y += 1) {
        var list_x = [];
        for (x = 0; x < tiles_x; x += 1) {
            list_x.push(value);            
        }
        world.push(list_x);        
    }
    
}

function initiateWorld(levelObj) {
    "use strict";
        
    var i_lvl,
        i_block,
        startpos = 0,
        borders = [],
        cur_enemies = [];
    
    var level = levelObj.file.split(";");
    
    var world_x = 0,
        world_y = 0;
    
    tiles_x = levelObj.tiles_x;
    tiles_y = levelObj.tiles_y;
    
    fillWorld(0);
        
    for (i_lvl = 0; i_lvl < level.length; i_lvl += 1) {
        if (i_lvl > 2) {                                    // Behind Propertys         
            var blocks = level[i_lvl].split(":");
            for (i_block=0; i_block < blocks[0]; i_block += 1) { 
                if (world_x < tiles_x && world_y < tiles_y) {
                    
                    var e_img = checkEnemyID(blocks[1]);
                    
                    if (e_img[0]) {
                        var new_e = new EnemyObj(e_img[0], e_img[1], e_img[2], e_img[3], e_img[4]);
                        new_e.position = [world_x * tile_size, world_y * tile_size];
                        new_e.state = "patrol";
                        new_e.move_state = 0;
                        cur_enemies.push(new_e);
                        world[world_y][world_x] = 0;
                                               
                    } else if (blocks[1] == 104) {
                        
                        if (borders[0]) {
                            borders[1] = [world_x * tile_size, world_y * tile_size];
                                                      
                            var e;
                            
                            for (e = 0; e < cur_enemies.length; e += 1) {
                                cur_enemies[e].borders = borders;
                                enemies.push(cur_enemies[e]);
                            }
                            
                            borders = [];
                            cur_enemies = [];
                            
                        } else {
                            borders[0] = [world_x * tile_size, world_y * tile_size];
                        }
                        
                        world[world_y][world_x] = 0;
                        
                    } else if (blocks[1] == 106) {
                        
                        world[world_y][world_x] = 0;
                        player.startposition = [tile_size * world_x, tile_size * world_y];
                        startpos = 1;
                        
                    } else {
                    
                        world[world_y][world_x] = parseInt(blocks[1]);

                        
                    }
                    
                    world_x += 1;
                                        
                    if (world_x >= tiles_x) {
                        
                        borders = [];
                        cur_enemies = [];
                        
                        world_y += 1;
                        world_x = 0;
                    }
                }
            }
        }        
    }
    
    if (startpos === 0) {
        player.startposition = [60, 60];    
    }
}

function initiatePhysicWorld() {
    "use strict";
    
    var w_x,
        w_y;
    
    for (w_y = 0; w_y < world.length; w_y += 1) {
        for (w_x = 0; w_x < world[w_y].length; w_x += 1) {
        
            if (world[w_y][w_x] !== 0 && physicTileNeeded(w_x, w_y) ) {
                physic_world.push([w_x * tile_size, w_y * tile_size, world[w_y][w_x]]);
            }   
            
        }
    }
    
}

function physicTileNeeded(w_x, w_y) {
    "use strict";
    
    if (w_x + 1 < tiles_x) {
        if (world[w_y][w_x + 1] == 0 ||
            world[w_y][w_x + 1] == 100) {
            //alert("WAH! " + w_y + "  " + w_x + "  " + world[w_y][w_x + 1]);
            return 1;  
        }
    }
    if (w_x > 0) {
        if (world[w_y][w_x - 1] == 0 ||
            world[w_y][w_x - 1] == 100) {
            return 1;  
        }
    }
    if (w_y + 1 < tiles_y) {
        if (world[w_y + 1][w_x] == 0 ||
            world[w_y + 1][w_x] == 100) {
            return 1;  
        }
    }
    if (w_y > 0) {
        if (world[w_y - 1][w_x] == 0 ||
            world[w_y - 1][w_x] == 100) {
            return 1;  
        }
    }
    return 0;
    
}

function moveCamera() {
    "use strict";

    if (player.position[0] < (camera.position[0] + 300) && camera.position[0] > 0) {
        camera.position[0] -= camera.speed;   
    }
    
    if (player.position[0] > (camera.position[0] + 500) && camera.position[0] < (world[0].length * tile_size) - 800) {
        camera.position[0] += camera.speed;
    }    
    
}

function initGame() {
    "use strict";
    
    loadImages();
    loadSounds();
    loadLevels();
    loadButtons();
    eventListener();
    
    //sounds[0].sound.play();
    sounds[0].sound.loop = 1; 
}

function initLevel() {
    "use strict";
    
    world = [];
    physic_world = [];
    enemies = [];
    camera.position = [0, 0];
    
    //fillWorld(0);    --> verschoben in initiateWorld()
    initiateWorld(getLevelByScene(cur_scene));
    initiatePhysicWorld();
    
    player.position = player.startposition;
    player.health = player.maxhealth;
    player.energy = 0;
    player.energy_show = 0;
           
}

function updateSprites() {
    "use strict";
    
    var i;
    
    for (i = 0; i < tiles.length; i += 1) {
        if (tiles[i]) {
            if (tiles[i].frames) {
                if (tiles[i].timeCount >= tiles[i].speed) {                
                    if (tiles[i].frameCount >= tiles[i].frames - 1) {
                        tiles[i].frameCount = 0; 
                    } else {
                        tiles[i].frameCount += 1;
                    }
                    tiles[i].timeCount = 0;
                }
                tiles[i].timeCount += 1;

            }
        }
    }
    
    for (i = 0; i < images.length; i += 1) {
        if (images[i]) {
            if (images[i].frames) {
                if (images[i].timeCount >= images[i].speed) {                
                    if (images[i].frameCount >= images[i].frames - 1) {
                        images[i].frameCount = 0; 
                    } else {
                        images[i].frameCount += 1;
                    }
                    images[i].timeCount = 0;
                }
                images[i].timeCount += 1;

            }
        }
    }
}

function updateExplosions() {
    "use strict";
    
    var i;
    
    for (i = 0; i < explosions.length; i += 1) {
        if (explosions[i].timeCount >= explosions[i].speed) {                
            explosions[i].frameCount += 1;
            explosions[i].timeCount = 0;
        } else {
            explosions[i].timeCount += 1;         
        }
    
        if (explosions[i].frameCount >= explosions[i].frames - 1) {
            explosions.splice(i, 1);
        }
    }
}

function addExplosion(number, position, radius, max_size, max_speed) {
    "use strict";
    
    var val_x,
        val_y,
        neg_x,
        neg_y,
        size,
        speed,
        pos_1,
        pos_2,
        count;
    
    for (count = 0; count <= number; count += 1) {
    
        val_x = Math.random() * radius[0];
        val_y = Math.random() * radius[1];
        neg_x = Math.random() * 2;
        neg_y = Math.random() * 2;
        size = (max_size * 0.5) + (Math.random() * max_size * 0.5);
        speed = Math.random() * max_speed;
       
        if (neg_x <= 1) {
            pos_1 = position[0] - 20 - val_x;
        } else {
            pos_1 = position[0] - 20 + val_x;
        }
        if (neg_y <= 1) {
            pos_2 = position[1] - 20 - val_y;
        } else {
            pos_2 = position[1] - 20 + val_y;
        }

        explosions.push(new ExplosionObj(images[105].image, [pos_1, pos_2], size, 13, speed));
    }
    
    sounds[20 + parseInt(Math.random() * 2)].sound.play();
    
    
}

function loadLevels() {
    "use strict";
    
    var l;
    
    for (l = 0; l < levels_val.length; l += 1) {
        levels.push(new LevelObj(levels_val[l][0],
                                 levels_val[l][1],
                                 levels_val[l][2],
                                 levels_val[l][3],
                                 levels_val[l][4],
                                 levels_val[l][5],
                                 levels_val[l][6]));    
    }
}

function getLevelByScene(scene) {
    "use strict";
    
    var l;
    
    for (l = 0; l < levels.length; l += 1) {
        if (levels[l].scene === scene) {
            return levels[l];    
        }
    }
    
}

function getSelectedLevel() {
    "user strict";
    
    var l;
    
    for (l = 0; l < levels.length; l += 1) {
        if (levels[l].selected) {
            return levels[l];    
        }
    }
    
    return 0;
}

function deselectLevels() {
    "use strict";
    
    var l;
    
    for (l = 0; l < levels.length; l += 1) {
        levels[l].selected = 0;    
    }
}

function loadButtons() {
    "use strict";
    
    var b;
    
    for (b = 0; b < buttons_val.length; b += 1) {
        buttons.push(new ButtonObj(buttons_val[b][0],
                                   buttons_val[b][1],
                                   buttons_val[b][2],
                                   buttons_val[b][3],
                                   buttons_val[b][4],
                                   buttons_val[b][5]));    
    }
    
}

function handleButtons() {
    "use strict";
    
    var b;
    
    for (b = 0; b < buttons.length; b += 1) {
        if (buttons[b].scene === cur_scene) {
            if (buttons[b].m_click) {
                doButtonsWork(buttons[b]);
                buttons[b].m_click = 0;
            }
        }
    }
}

function doButtonsWork(button) {
    "use strict";
    
    var func = button.action;
    
    if (func[0] === "setScene") {
        setScene(func[1]);    
    } else if (func[0] === "openLink") {
        openLink(func[1]);    
    } else if (func[0] === "startLevel") {
        setScene(func[1]);
        initLevel();
    } else if (func[0] === "startUserLevel") {
        var scn = getSelectedLevel().scene;
        if (scn) {
            setScene(scn);
            initLevel();
        }
    }
    
}

function checkMouseOver(event) {
    "use strict";
    
    var posX = event.pageX - document.getElementById("game").offsetLeft,
        posY = event.pageY - document.getElementById("game").offsetTop,
        b;
    
    for (b = 0; b < buttons.length;  b += 1) {
        if (overButton(posX, posY, buttons[b])) {
            buttons[b].m_over = 1;
        } else {
            buttons[b].m_over = 0;
        }
    }
}
            
function checkMouseClick(event) {
    "use strict";
    
    var posX = event.pageX - document.getElementById("game").offsetLeft,
        posY = event.pageY - document.getElementById("game").offsetTop,
        b,
        l,
        l_count = 0,
        l_posY;

    for (b = 0; b < buttons.length;  b += 1) {
        if (buttons[b].scene === cur_scene) {
            if (overButton(posX, posY, buttons[b])) {
                buttons[b].m_click = 1;
            } else {
                buttons[b].m_click = 0;
            }
        }
    }
    
    for (l = 0; l < levels.length; l += 1) {
        if (levels[l].author !== "admin") {
            l_posY = 140 + (l_count * 40);
            l_count += 1;
            if (overLevel(posX, posY, l_posY)) {
                deselectLevels();
                levels[l].selected = 1;
                
            }    
        }
    }
    
}

function overButton(pos_1, pos_2, button) {
    "use strict";

    if (pos_1 > button.position[0] &&
        pos_1 < button.position[0] + images[button.img_on].image.width &&
        pos_2 > button.position[1] &&
        pos_2 < button.position[1] + images[button.img_on].image.height) {
        return 1;
    }
   
    return 0;    
}

function overLevel(pos_1, pos_2, l_posY) {
    "use strict";

    if (pos_1 > 100 &&
        pos_1 < 600 &&
        pos_2 > l_posY &&
        pos_2 < l_posY + 30) {
        return 1;
    }
   
    return 0;
}


// ENGINE FUNCTIONS


function loadImages() {
    "use strict";

    var i,
        img;
    
    for (i = 0; i < tiles_load.length; i += 1) {
        img = new Image();
        img.src = "images/" + tiles_load[i][1];
        
        if (tiles_load[i][2]) {
            tiles[tiles_load[i][0]] = new SpriteObj(img, tiles_load[i][2], tiles_load[i][3]);
        } else {        
            tiles[tiles_load[i][0]] = new ImageObj(img);
        }
    }
    
    for (i = 0; i < images_load.length; i += 1) {
        img = new Image();
        img.src = "images/" + images_load[i][1];
        if (images_load[i][2]) {
            images[images_load[i][0]] = new SpriteObj(img, images_load[i][2], images_load[i][3]);
        } else {        
            images[images_load[i][0]] = new ImageObj(img);
        }
    }
}

function loadSounds() {
    "use strict";

    var i,
        sound;
    
    for (i = 0; i < sounds_load.length; i += 1) {
        sound = new Audio();
        sound.src = "sounds/" + sounds_load[i][1];
             
        sounds[sounds_load[i][0]] = new SoundObj(sound);
        
    }
    
}



function getDistance(pos_1, pos_2) {
    "use strict";
    
    var x = pos_1[0] - pos_2[0],
        y = pos_1[1] - pos_2[1],
        dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
    
    return dist;
    
}

function ElementInList(list, element) {
    var i;
    
    for (i = 0; i <= list.length; i += 1) {
        if (list[i] == element) {
            return 1;    
        }
    }
    
    return 0;
}

function getInput() {
    "use strict";
    var event_list = [];
    
    if (keysdown[68]) {     // D
        event_list.push("D");
    }
        
    if (keysdown[65]) {     // A
        event_list.push("A");
    }
                     
    if (keysdown[87]) {     // W
        event_list.push("W");
    }
    
    if (keysdown[13]) {     // Enter
        event_list.push("Enter");
    }
    
    return event_list;
}

function eventListener() {
	"use strict";
	
	addEventListener("keydown", function (e) {
		keysdown[e.keyCode] = true;
	}, false);

	addEventListener("keyup", function (e) {
		delete keysdown[e.keyCode];
	}, false);

}

function setScene(name) {
    "use strict";
    
    cur_scene = name;
}

function openLink(link) {
    "use strict";
    
    window.open(link,"_self")
}



function render() {
    "use strict";
    
    ctx.clearRect(0, 0, 800, 400);
    if (cur_scene === "menu") {
        drawBackground();
        drawButtons();
        drawHead();
    } else if (cur_scene === "level") {
        drawBackground();
        drawButtons();
        drawHead();
    } else if (cur_scene[0] + cur_scene[1] === "l_") {
        drawBackground();
        drawPlayer();
        drawShots();
        drawTiles(world); 
        drawEnemies();
        drawExplosions();
        drawVignette();
        drawText("Energy: " + player.energy_show, 5, 0, "20px", "white", "left", "top");
        drawText("Health: " + player.health, 5, 25, "20px", "white", "left", "top");
        drawButtons();
    } else if (cur_scene === "userlevel") {
        drawBackground();
        drawButtons();
        drawHead();
        drawUserLevels();
    }
    
}

function logic() {
    "use strict";
    
    handleButtons();
    
    if (cur_scene[0] + cur_scene[1] === "l_") {
        movePlayer();
        handleEnemies();
        moveShots();
        moveCamera();
        updateSprites();
        updateExplosions();

        if (player.energy > player.energy_show) {
            player.energy_show += 1;    
        }
        if (player.energy < player.energy_show) {
            player.energy_show -= 1;    
        }

        if (player.health <= 0) {
            initLevel();
        }
    }
        
}

function loop() {
    "use strict";
    
    logic();
    render();
    window.setTimeout(loop, 10);
}

initGame()
loop();